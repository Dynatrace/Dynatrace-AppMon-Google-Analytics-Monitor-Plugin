
 /**
  * This template file was generated by dynaTrace client.
  * The dynaTrace community portal can be found here: http://community.dynatrace.com/
  * For information how to publish a plugin please visit http://community.dynatrace.com/plugins/contribute/
  **/ 

package com.dynatrace.diagnostics.plugin.GoogleAnalytics;

import com.dynatrace.diagnostics.pdk.*;
import com.google.gdata.data.analytics.DataEntry;

import java.util.Collection;
import java.util.logging.Level;
import java.util.logging.Logger;


public class MonitorImpl implements Monitor {

	private static final Logger log = Logger.getLogger(MonitorImpl.class.getName());

	private GoogleAnalyticsMonitorImpl googleMonitor = null;
	private String website;
	private boolean lastEntry = false;
	private boolean logDetails = false;
	private boolean includeHours = false;

	@Override
	public Status setup(MonitorEnvironment env) throws Exception {
		String username = env.getConfigString("googleAccountName");
		String password = env.getConfigPassword("googleAccountPassword");
		website = env.getConfigString("website");
		lastEntry = env.getConfigBoolean("lastEntry");
		logDetails = env.getConfigBoolean("logDetails");
		includeHours = env.getConfigBoolean("includeHours");

		log.info("Starting Google Analytics Monitor on " + website + " with lastEntry=" + lastEntry);
		
		try {
			// connect and retrieve first data set
			googleMonitor = new GoogleAnalyticsMonitorImpl(website, username, password, includeHours, log, logDetails);
			googleMonitor.retrieveNextFeed();
		} catch(Exception e) {
			log.severe(e.getMessage());
			return new Status(Status.StatusCode.ErrorInternalException, "Connection to Google Analytics", "", e);
		}
		
		return new Status(Status.StatusCode.Success, "Connected to Google and getting data for " + website + " with lastEntry=" + lastEntry);
	}

	private static final String METRIC_GROUP = "Analytics";
	private static final String METRIC_PAGEVIEWS = "PageViews";
	private static final String METRIC_BOUNCES = "Bounces";
	private static final String METRIC_EXITS = "Exits";
	private static final String METRIC_NEWVISITS = "New Visits";
	private static final String METRIC_TIMEONPAGE = "Time on Page";
	private static final String METRIC_TIMEONSITE = "Time on Site";
	private static final String METRIC_VISITS = "Visits";
	
	protected boolean setMonitorValue(MonitorEnvironment env, DataEntry dataEntry, String dtMetricName, String googleMetricName) {
		try {
			Collection<MonitorMeasure> measures = env.getMonitorMeasures(METRIC_GROUP, dtMetricName);
			if (measures == null) {
				return false;
			}
	
			// set the measurement
			for (MonitorMeasure measure : measures) {
				measure.setValue(dataEntry.longValueOf(googleMetricName));
			}
			return true;
		}catch(Exception e) {
			return false;
		}
	}
	
	@Override
	public Status execute(MonitorEnvironment env) throws Exception {
		
		try {			
			// retrieve the next data feed and get the delta to the previous or the last valid entry
			googleMonitor.retrieveNextFeed();			
			DataEntry dataEntry = lastEntry ? googleMonitor.getMostRecentValidEntry() : googleMonitor.getLatestDeltasMerged();			
			if(dataEntry == null) {
				log.info("No new data retrieved for " + website + " with lastEntry option = " + lastEntry);
				return new Status(Status.StatusCode.PartialSuccess, "No new data available on " + googleMonitor.getActualWebSite() + "/" + website);
			}
			
			log.info("Retrieved more data for " + website + " with lastEntry option = " + lastEntry);
			
			// set our values
			if(!setMonitorValue(env, dataEntry, METRIC_PAGEVIEWS, GoogleAnalyticsMonitorImpl.PAGEVIEWS))
				return new Status(Status.StatusCode.ErrorInternal, "failed to get monitor measures");
			if(!setMonitorValue(env, dataEntry, METRIC_BOUNCES, GoogleAnalyticsMonitorImpl.BOUNCES))
				return new Status(Status.StatusCode.ErrorInternal, "failed to get monitor measures");
			if(!setMonitorValue(env, dataEntry, METRIC_EXITS, GoogleAnalyticsMonitorImpl.EXITS))
				return new Status(Status.StatusCode.ErrorInternal, "failed to get monitor measures");
			if(!setMonitorValue(env, dataEntry, METRIC_NEWVISITS, GoogleAnalyticsMonitorImpl.NEWVISITS))
				return new Status(Status.StatusCode.ErrorInternal, "failed to get monitor measures");
			if(!setMonitorValue(env, dataEntry, METRIC_TIMEONPAGE, GoogleAnalyticsMonitorImpl.TIMEONPAGE))
				return new Status(Status.StatusCode.ErrorInternal, "failed to get monitor measures");
			if(!setMonitorValue(env, dataEntry, METRIC_TIMEONSITE, GoogleAnalyticsMonitorImpl.TIMEONSITE))
				return new Status(Status.StatusCode.ErrorInternal, "failed to get monitor measures");
			if(!setMonitorValue(env, dataEntry, METRIC_VISITS, GoogleAnalyticsMonitorImpl.VISITS))
				return new Status(Status.StatusCode.ErrorInternal, "failed to get monitor measures");
		} catch (Exception e) {
			StackTraceElement[] stackTrace = e.getStackTrace();
			StringBuffer sb = new StringBuffer();
			for(StackTraceElement st : stackTrace) {
				sb.append(st.getClass() + "." + st.getMethodName() + ":" + st.getLineNumber() + "\n");
			}
			log.log(Level.SEVERE, "Execute: " + sb.toString(), e);
			return new Status(Status.StatusCode.ErrorInfrastructure, "Execute: " + e.getMessage(), "", e);			
		}
		
		return new Status(Status.StatusCode.Success, "Monitoring Results from " + googleMonitor.getActualWebSite());
	}

	@Override
	public void teardown(MonitorEnvironment env) throws Exception {
		// TODO
	}
}
